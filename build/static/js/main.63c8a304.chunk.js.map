{"version":3,"sources":["Loader/Loader.jsx","Content/Content.jsx","App.js","reportWebVitals.js","index.js"],"names":["Loader","className","Content","props","height","width","useState","name","setName","buttonPressed","setButtonPressed","window","addEventListener","event","preventDefault","returnValue","axios","post","oldHash","id","src","alt","onClick","data","document","getElementById","value","link","then","response","App","getWindowDimensions","innerWidth","innerHeight","windowDimensions","setWindowDimensions","useEffect","handleResize","removeEventListener","useWindowDimensions","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"qRASeA,EANA,WACb,OACE,qBAAKC,UAAU,YC0FJC,EA1FC,SAACC,GAEf,IAAQC,EAAkBD,EAAlBC,OAAQC,EAAUF,EAAVE,MAEhB,EAA0BC,mBAAS,IAAnC,mBAAQC,EAAR,KAAcC,EAAd,KACA,EAA4CF,oBAAS,GAArD,mBAAQG,EAAR,KAAuBC,EAAvB,KACA,EAA0BJ,mBAAS,GAAnC,6BAGAK,OAAOC,iBAAiB,gBAAgB,SAACC,GAEvCA,EAAMC,iBAEND,EAAME,YAAc,GAEpBC,IAAMC,KAAK,gDAAiD,CAACC,QAASX,OA6CxE,OACE,sBAAKN,UAAU,QAAf,UAzBY,KAATM,GAAgBE,EAGXA,EACE,qBAAKU,GAAG,UAAR,SAAkB,cAAC,EAAD,MAGrB,qBAAKC,IAAG,iDAA4Cb,EAA5C,QAAwDc,IAAI,0CANjE,oBAAIpB,UAAU,OAAd,2CA4BR,uBAAOkB,GAAG,SACV,wBAAQG,QAhDQ,WAClBZ,GAAiB,GACjB,IAAMa,EAAOC,SAASC,eAAe,QAAQC,MAC7CF,SAASC,eAAe,QAAQC,MAAQ,GACxCV,IAAMC,KAAK,+CAAgD,CACzDU,KAAMJ,EACNL,QAASX,EACTH,OAAQA,EACRC,MAAOA,IAGRuB,MAAK,SAAAC,GACJrB,EAAQqB,EAASN,MACjBb,GAAiB,OAmCjB,wB,MChCSoB,MAnCf,WAEE,SAASC,IACP,MAAmDpB,OACnD,MAAO,CACLN,MAFF,EAAQ2B,WAGN5B,OAHF,EAA2B6B,aAsB7B,MAfA,WACE,MAAgD3B,mBAASyB,KAAzD,mBAAOG,EAAP,KAAyBC,EAAzB,KAWA,OATAC,qBAAU,WACR,SAASC,IACPF,EAAoBJ,KAItB,OADApB,OAAOC,iBAAiB,SAAUyB,GAC3B,kBAAM1B,OAAO2B,oBAAoB,SAAUD,MACjD,IAEIH,EAGiBK,GAAlBnC,EAAR,EAAQA,OAAQC,EAAhB,EAAgBA,MAEhB,OACE,qBAAKJ,UAAU,MAAf,SACE,cAAC,EAAD,CAASA,UAAU,UAAUG,OAAQA,EAAQC,MAAOA,OCrB3CmC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBd,MAAK,YAAkD,IAA/Ce,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF1B,SAASC,eAAe,SAM1Be,M","file":"static/js/main.63c8a304.chunk.js","sourcesContent":["import React from 'react';\nimport './Loader.css';\n\nconst Loader = () => {\n  return (\n    <div className=\"Loader\" />\n  );\n};\n\nexport default Loader;","import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './Content.css'\nimport Loader from '../Loader/Loader';\n\nconst Content = (props) => {\n\n  const { height, width } = props;\n\n  const [ name, setName ] = useState(\"\");\n  const [ buttonPressed, setButtonPressed ] = useState(false);\n  const [ test, setTest ] = useState(0)\n  //const [ show, setShow] = useState(false);\n  \n  window.addEventListener('beforeunload', (event) => {\n    // Cancel the event as stated by the standard.\n    event.preventDefault();\n    // Chrome requires returnValue to be set.\n    event.returnValue = '';\n    \n    axios.post(\"https://web-photographer.herokuapp.com/delete\", {oldHash: name});\n  });\n\n  const handleInput = () => {\n    setButtonPressed(true);\n    const data = document.getElementById(\"link\").value;\n    document.getElementById(\"link\").value = \"\";\n    axios.post(\"https://web-photographer.herokuapp.com/image\", { \n      link: data,\n      oldHash: name,\n      height: height,\n      width: width\n      //waitTime: document.getElementById(\"waitTime\").value\n    })\n    .then(response => {\n      setName(response.data);\n      setButtonPressed(false);\n    });\n  }\n  \n  const imageDisplay = () => {\n    if(name === \"\" && !buttonPressed){\n      return (<h1 className=\"text\">Enter a link to photograph it</h1>);\n    }\n    else if(buttonPressed){\n      return (<div id='content'><Loader /></div>);\n    }\n  \n    return(<img src={`https://web-photographer.herokuapp.com/${name}.png`} alt=\"Photograph of the website you entered\" />);\n  }\n  \n  const imageDisplayTest = () => {\n    if(test === 0){\n      return (<h1 className=\"text\">Enter a link to photograph it</h1>);\n    }\n    else if(test === 1){\n      return(<img src={`https://web-photographer.herokuapp.com/${name}.png`} alt=\"Photograph of the website you entered\" />);\n    }\n    else{\n      return (<div id='content'><Loader /></div>);\n    }\n  }\n  \n  \n\n  return(\n    <div className=\"input\">\n      {imageDisplay()}\n    \n    \n      <input id=\"link\"/>\n      <button onClick={handleInput}>Search</button>\n      \n      \n      {/* for image, loader and text testing */}\n      {/* <div className=\"testing\">\n        <button onClick={() => setTest(1)}>Change to picture</button>\n        <button onClick={() => setTest(0)}>Change to text</button>\n        <button onClick={() => setTest(2)}>Change to loader</button>\n      </div> */}\n\n      {/* custome time to wait for the webpage to load  */}\n      {/* <button onClick={()=>setShow(!show)}>{show ? 'Hide settings' : 'Show settings'}</button>\n\n      {show && (\n      <div>\n        <h3>Set a timer to wait for the page to load (in seconds).</h3>\n        <input id=\"waitTime\" value='1' />\n      </div>\n      )} */}\n\n    </div>\n  )\n}\n\nexport default Content;","import React, { useState, useEffect } from 'react';\nimport Content from './Content/Content.jsx'\nimport './App.css'\n\nfunction App() {\n\n  function getWindowDimensions() {\n    const { innerWidth: width, innerHeight: height } = window;\n    return {\n      width,\n      height\n    };\n  }\n  \n  function useWindowDimensions() {\n    const [windowDimensions, setWindowDimensions] = useState(getWindowDimensions());\n  \n    useEffect(() => {\n      function handleResize() {\n        setWindowDimensions(getWindowDimensions());\n      }\n  \n      window.addEventListener('resize', handleResize);\n      return () => window.removeEventListener('resize', handleResize);\n    }, []);\n  \n    return windowDimensions;\n  }\n\n  const { height, width } = useWindowDimensions();\n\n  return (\n    <div className=\"App\">\n      <Content className=\"Content\" height={height} width={width} />\n    </div>\n    \n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}